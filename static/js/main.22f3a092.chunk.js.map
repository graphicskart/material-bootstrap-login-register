{"version":3,"sources":["components/Input.js","components/Login.js","components/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","_props$id","id","_props$required","required","_props$label","label","_props$type","type","onChange","_props$value","value","_props$name","name","react_default","a","createElement","className","for","initialUser","username","password","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","user","objectSpread","state","defineProperty","target","onSubmit","preventDefault","alert","components_Input","href","Component","repeat_password","Signup","onClick","toggleClass","App","active","concat","Login_Login","Signup_Signup","assign","title","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22f3a092.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Input = props => {\n  const {\n    id = \"\",\n    required = false,\n    label = \"\",\n    type = \"text\",\n    onChange,\n    value = \"\",\n    name = \"\"\n  } = props;\n\n  return (\n    <div className=\"input-container\">\n      <input\n        type={type}\n        id={id}\n        required={required}\n        onChange={onChange}\n        value={value}\n        name={name}\n      />\n      <label for={id}>{label}</label>\n      <div className=\"bar\" />\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport { Input } from \"../components\";\n\nconst initialUser = {\n  username: \"\",\n  password: \"\"\n};\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: { ...initialUser }\n    };\n  }\n\n  onChange = e => {\n    this.setState({\n      user: {\n        ...this.state.user,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.setState({\n      user: { ...initialUser }\n    });\n    alert(\"Login Succesfully!\");\n  };\n\n  render() {\n    return (\n      <div className=\"card\">\n        <h1 className=\"title\">Login</h1>\n        <form onSubmit={this.onSubmit}>\n          <Input\n            type=\"text\"\n            id=\"Username\"\n            label=\"Username\"\n            required={true}\n            onChange={this.onChange}\n            value={this.state.user.username}\n            name=\"username\"\n          />\n          <Input\n            type=\"password\"\n            id=\"Password\"\n            label=\"Password\"\n            required={true}\n            onChange={this.onChange}\n            value={this.state.user.password}\n            name=\"password\"\n          />\n          <div className=\"button-container\">\n            <button type=\"submit\">\n              <span>Login</span>\n            </button>\n          </div>\n          <div className=\"footer\">\n            <a href=\"javascript:void(0);\">Forgot your password?</a>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Input } from \"../components\";\n\nconst initialUser = {\n  username: \"\",\n  password: \"\",\n  repeat_password: \"\"\n};\n\nexport default class Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: { ...initialUser }\n    };\n  }\n\n  onChange = e => {\n    this.setState({\n      user: {\n        ...this.state.user,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.setState({\n      user: { ...initialUser }\n    });\n    alert(\"Registered Succesfully!\");\n  };\n\n  render() {\n    return (\n      <div className=\"card alt\">\n        <div className=\"toggle\" onClick={this.props.toggleClass} />\n        <h1 className=\"title\">\n          Register\n          <div className=\"close\" onClick={this.props.toggleClass} />\n        </h1>\n        <form onSubmit={this.onSubmit}>\n          <Input\n            type=\"text\"\n            id=\"Username\"\n            label=\"Username\"\n            required={true}\n            onChange={this.onChange}\n            value={this.state.user.username}\n            name=\"username\"\n          />\n          <Input\n            type=\"password\"\n            id=\"Password\"\n            label=\"Password\"\n            required={true}\n            onChange={this.onChange}\n            value={this.state.user.password}\n            name=\"password\"\n          />\n          <Input\n            type=\"password\"\n            id=\"Repeat_Password\"\n            label=\"Repeat Password\"\n            required={true}\n            onChange={this.onChange}\n            value={this.state.user.repeat_password}\n            name=\"repeat_password\"\n          />\n          <div className=\"button-container\">\n            <button type=\"submit\">\n              <span>Submit</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Login, Signup } from \"./components\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: false\n    };\n  }\n\n  toggleClass = () => {\n    this.setState({\n      active: !this.state.active\n    });\n  };\n\n  render() {\n    return (\n      <div className={`container ${this.state.active ? \"active\" : \"\"}`}>\n        <div className=\"row\">\n          <div className=\"pen-title\">\n            <h1>Material Login Form</h1>\n          </div>\n\n          <div className=\"container\">\n            <div className=\"card\" />\n            <Login {...this.state} />\n            <Signup {...this.state} toggleClass={this.toggleClass} />\n          </div>\n          <a\n            id=\"portfolio\"\n            href=\"javascript:void(0);\"\n            title=\"View my portfolio!\"\n          >\n            <i className=\"fa fa-link\" />\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}